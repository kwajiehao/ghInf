for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
#'
#' @return a sequence of indices which permutes the original matrix
#' @export
#'
#' @examples
#' i <- 2
#' j <- 3
#' k <- 2
#' levels <- 3
#' depthfirst(i = i, j = j, k = k, levels = levels)
depthfirst <- function(i, j, k = NA, levels){
# levels represents the number of levels of the gaussian hierarchical model in question. for now, this function only
# works with centered 2- and 3-level parametrizations
if (levels > 3 | levels < 2){
stop("number of levels chosen is not supported!")
}
# i represents the number of nodes at level 1
# j represents the number of children nodes in level 2 per node at level 1
# k represents the number of children nodes in level 3 per node at level 2
# the trick is to keep each index and add numbers so that they become the right index
if (levels == 2){
n <- i*j + i + 1# total number of params
o <- seq(1, n) # ascending order
increment <- seq(0, (i-1))
for (k in 1:i){
o[(j * increment[k] + 1):(j * increment[k] + j)] <- o[(j * increment[k] + 1):(j * increment[k] + j)] + increment[k]
o[((i*j) + k)] <- j*(increment[k]+1) + k
}
}
if (levels == 3){
n <- i*j*k + i*j + i + 1 # total number of params
o <- seq(1, n) # ascending order
increment <- seq(0, (i-1))
for (m in 1:i){
for (l in 1:j){
for (h in 1:k){
# print(paste0(m,l,h))
# print((m-1)*j*k + (l-1)*k + h)
o[(m-1)*j*k + (l-1)*k + h] <- (m-1)*(j*k + j + 1) + (l-1)*(k+1) + h
}
# print(i*j*k + (m-1)*j +l)
o[i*j*k + (m-1)*j +l] <- (m-1)*(j*k + j + 1) + (l)*(k+1)
}
# print((i*j*k + i*j + m) + (j*k + j) + 1)
o[i*j*k + i*j + m] <- (m-1)*(j*k + j + 1) + (j*k + j) + 1
}
}
return(order(o)[seq(1,n)])
}
# # test to show how depthfirst works
I <- 2
J <- 3
K <- 2
n <- I*J*K + I*J + I + 1
depthfirst_test <- centered_precgen3(i=I, j=J, k=K, flat_prior = TRUE, tau = 1, tau_a = 1, tau_b = 1, tau_c = 1, sigma_2 = 1)
test_mat <- matrix(0, (I*J*K + I*J + I + 1), (I*J*K + I*J + I + 1))
depthfirst_test <- ghInf::centered_precgen3(i=I, j=J, k=K, flat_prior = TRUE, tau = 1, tau_a = 1, tau_b = 1, tau_c = 1, sigma_2 = 1)
test_mat <- matrix(0, (I*J*K + I*J + I + 1), (I*J*K + I*J + I + 1))
test_mat[cbind(depthfirst_test$indices_i, depthfirst_test$indices_j)] <- depthfirst_test$entries
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
colnames(test_mat) <- cols
rownames(test_mat) <- rows
og <- depthfirst(i = 2, j = 3, k = 2, levels = 3)
og
length(og)
## compare original matrix with permuted matrix
test_mat
test_mat[og,og]
devtools::load_all(".")
#################### centered 3-level ####################
I <- 2
J <- 3
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
J <- 6
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <- Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
ordered_Q
sum(ordered_Q != Q_depthfirst)
devtools::load_all(".")
devtools::check()
#################### centered 2-level ####################
I <- 2
J <- 6
n <- (I*J + I + 1)
centered_test2 <- ghInf::centered_precgen2(i = I, j = J)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
cols[(i-1)*J + j] <- paste0('B', i, j)
}
cols[(I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test2$indices_i, centered_test2$indices_j)] <- centered_test2$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = i, j = j, levels = 2)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- as.matrix(Q_spam_depthfirst)
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <-Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
ordered_Q
#################### centered 3-level ####################
I <- 2
J <- 6
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <- Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
Q_depthfirst
J <- 3
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
devtools::load_all(".")
#################### centered 2-level ####################
I <- 2
J <- 6
n <- (I*J + I + 1)
centered_test2 <- ghInf::centered_precgen2(i = I, j = J)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
cols[(i-1)*J + j] <- paste0('B', i, j)
}
cols[(I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test2$indices_i, centered_test2$indices_j)] <- centered_test2$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = i, j = j, levels = 2)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- as.matrix(Q_spam_depthfirst)
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <-Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
ordered_Q
#################### centered 3-level ####################
I <- 2
J <- 3
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <- Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
ordered_Q
sum(ordered_Q != Q_depthfirst)
#################### centered 3-level ####################
I <- 3
J <- 10
K <- 20
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
Q_spam_depthfirst <- Q_spam[og2, og2]
Q_depthfirst <- Q_spam_mat[og2, og2]
Q_depthfirst
# obtain the randomly permuted matrix
o <- seq(1, n)
og <- sample(o)
Q_spam_random <- Q_spam[og, og]
Q_spam_random_labelled <- Q_spam_mat[og, og]
# find the ordering used in cholesky decomposition
cholesky <- spam::chol(Q_spam_random, pivot = TRUE)
og3 <- spam::ordering(cholesky, inv = FALSE)
# compare with depth-first permutation
ordered_Q <- Q_spam_random_labelled[og3, og3]
sum(ordered_Q != Q_depthfirst)
ordered_Q
sum(ordered_Q != Q_depthfirst)
#'
#' @return a sequence of indices which permutes the original matrix
#' @export
#'
#' @examples
#' i <- 2
#' j <- 3
#' k <- 2
#' levels <- 3
#' depthfirst(i = i, j = j, k = k, levels = levels)
depthfirst <- function(i, j, k = NA, levels){
# levels represents the number of levels of the gaussian hierarchical model in question. for now, this function only
# works with centered 2- and 3-level parametrizations
if (levels > 3 | levels < 2){
stop("number of levels chosen is not supported!")
}
# i represents the number of nodes at level 1
# j represents the number of children nodes in level 2 per node at level 1
# k represents the number of children nodes in level 3 per node at level 2
# the trick is to keep each index and add numbers so that they become the right index
if (levels == 2){
n <- i*j + i + 1# total number of params
o <- seq(1, n) # ascending order
increment <- seq(0, (i-1))
for (k in 1:i){
o[(j * increment[k] + 1):(j * increment[k] + j)] <- o[(j * increment[k] + 1):(j * increment[k] + j)] + increment[k]
o[((i*j) + k)] <- j*(increment[k]+1) + k
}
}
if (levels == 3){
n <- i*j*k + i*j + i + 1 # total number of params
o <- seq(1, n) # ascending order
increment <- seq(0, (i-1))
for (m in 1:i){
for (l in 1:j){
for (h in 1:k){
# print(paste0(m,l,h))
# print((m-1)*j*k + (l-1)*k + h)
o[(m-1)*j*k + (l-1)*k + h] <- (m-1)*(j*k + j + 1) + (l-1)*(k+1) + h
}
# print(i*j*k + (m-1)*j +l)
o[i*j*k + (m-1)*j +l] <- (m-1)*(j*k + j + 1) + (l)*(k+1)
}
# print((i*j*k + i*j + m) + (j*k + j) + 1)
o[i*j*k + i*j + m] <- (m-1)*(j*k + j + 1) + (j*k + j) + 1
}
}
return(order(o)[seq(1,n)])
}
# # test to show how depthfirst works
I <- 2
J <- 3
K <- 2
n <- I*J*K + I*J + I + 1
depthfirst_test <- ghInf::centered_precgen3(i=I, j=J, k=K, flat_prior = TRUE, tau = 1, tau_a = 1, tau_b = 1, tau_c = 1, sigma_2 = 1)
test_mat <- matrix(0, (I*J*K + I*J + I + 1), (I*J*K + I*J + I + 1))
test_mat[cbind(depthfirst_test$indices_i, depthfirst_test$indices_j)] <- depthfirst_test$entries
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
colnames(test_mat) <- cols
rownames(test_mat) <- rows
og <- depthfirst(i = 2, j = 3, k = 2, levels = 3)
og
length(og)
## compare original matrix with permuted matrix
test_mat
test_mat[og,og]
#################### centered 3-level ####################
I <- 2
J <- 3
K <- 2
n <- (I*J*K + I*J + I + 1)
centered_test3 <- ghInf::centered_precgen3(i = I, j = J, k = K)
# without permutation, I use a lexicographic ordering
cols <- rep('B', n)
for (i in 1:I){
for (j in 1:J){
for (k in 1:K){
cols[ (i-1)*K*J + K*(j-1) + k] <- paste0('B', i, j, k)
}
cols[I*J*K + (i-1)*J + j] <- paste0('B', i, j)
}
cols[I*J*K + (I*J) + i] <- paste0('B', i)
}
rows <- cols
# construct spam matrix
Q_spam <- spam::spam(0, n, n) # note that this is different for the centered functions
Q_spam[cbind(centered_test3$indices_i, centered_test3$indices_j)] <- centered_test3$entries
Q_spam_mat <- as.matrix(Q_spam)
colnames(Q_spam_mat) <- cols
rownames(Q_spam_mat) <- rows
Q_spam_mat
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
og2
devtools::load_all(".")
# obtain the depth-first permuted matrix
og2 <- ghInf::depthfirst(i = I, j = J, k = K, levels = 3)
og2
